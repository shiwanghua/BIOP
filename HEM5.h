//#pragma once
#ifndef _REIN_BITS5_H
#define _REIN_BITS5_H

#include <cstring>
#include "Util.h"
#include "constant.h"
#include <algorithm>
#include <unordered_set>
#include <bitset>
#include "ThreadPool.h"

#define _for(i, a, b) for (int i = (a); i < (b); ++i)
#define __for(i, a, b) for (int i = (a); i <= (b); ++i)
#define mfor(i, a, b) for (int i = (a); i > (b); --i)
#define mmfor(i, a, b) for (int i = (a); i >= (b); --i)

// ??????
class HEM5
{
private:
	int numSub, numDimension, buckStep, numBits;
	vector<vector<vector<Combo>>> data[2]; // 0:left parenthesis, 1:right parenthesis
	vector<vector<bitset<subs>>> bits[2];  // low/high -> attrNo -> bktID -> bitsetID for direct or reverse match process
	vector<vector<int>> fix[2];			   // 0??low????????1??high?????????????????????????
	vector<bitset<subs>> fullBits;		   // ??????bits?????—¨??????????
	int **endBucket[2], **bitsID[2];	   // ???????bucket????????????????????bucket???????bits??????¡À?
	bool **doubleReverse[2];			   // ?true????1???0, DSS
	ThreadPool threadPool;

public:
	int numBucket;
	double compareTime = 0.0; // ?????????????????????cell???????????????
	double markTime = 0.0;	  // ??????
	double orTime = 0.0;	  // ?????????
	double bitTime = 0.0;	  // ????bits?????????????????
	double mergeTime = 0.0;
	// vector<unordered_set<int>> bucketSub;   // id???????›¥??????????????

	HEM5(int type);
	~HEM5();

	void initBits(); // ???????????bits????
	
	// void insert(Sub sub);
	void insert(IntervalSub sub);		 // ???bitset????????
	void insert_online(IntervalSub sub); // ????????????????????????
	bool deleteSubscription(IntervalSub sub);

	// void match(const Pub& pub, int& matchSubs, const vector<Sub>& subList);
	void match(const Pub &pub, int &matchSubs);

	void match_debug(const Pub &pub, int &matchSubs);

	void match_parallel(const Pub &pub, int &matchSubs);

	void match_avxOR_parallel(const Pub &pub, int &matchSubs);

	// void calBucketSize(); // ????bucketSize
	int calMemory();					 // ???????????§³
	void printRelation(int dimension_i); // ????????
	vector<int> calMarkNumForBuckets();	 // ???????????????????????????????????¦Í?????
};

#endif
